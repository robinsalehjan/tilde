# Docker Compose file for Vapor
#
# Install Docker on your system to run and test
# your Vapor app in a production-like environment.
#
# Note: This file is intended for testing and does not
# implement best practices for a production deployment.
#
# Learn more: https://docs.docker.com/compose/reference/
#
#   Build images: docker-compose build
#      Start app: docker-compose up app
# Start database: docker-compose up database
# Run migrations: docker-compose run migrate
#       Stop all: docker-compose down (add -v to wipe database)
#
version: '3.7'

volumes:
  database:

networks:
  default: 
    name: "tilde_network"

services:
  app:
    image: tilde:latest
    init: true
    env_file: .env
    container_name: $SERVICE_NAME
    build:
      context: .
    depends_on:
      database:
        condition: service_healthy
    ports:
      - $SERVICE_PORT:$SERVICE_PORT
    command: ["serve", "--env", "production", "--hostname", $SERVICE_NAME, "--port", $SERVICE_PORT]
  migrate:
    image: tilde:latest
    init: true
    build:
      context: .
    depends_on:
      database:
        condition: service_healthy
    command: ["migrate", "--yes"]
    deploy:
      replicas: 0
  revert:
    image: tilde:latest
    init: true
    build:
      context: .
    depends_on:
      database:
        condition: service_healthy
    command: ["migrate", "--revert", "--yes"]
    deploy:
      replicas: 0
  database:
    image: postgres:14-alpine
    init: true
    env_file: .env
    container_name: $DATABASE_NAME
    volumes:
      - database:/var/lib/postgresql/data/pgdata
    environment:
      PGDATA: /var/lib/postgresql/data/pgdata
      POSTGRES_USER: $DATABASE_USERNAME
      POSTGRES_PASSWORD: $DATABASE_PASSWORD
      POSTGRES_DB: $DATABASE_NAME
    ports:
      - $DATABASE_PORT:$DATABASE_PORT
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d $$DATABASE_NAME -U $$DATABASE_USERNAME"] # Use double `$` to expand the environment variables during execution
      interval: 5s
      timeout: 5s
      retries: 5